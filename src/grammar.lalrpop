use crate::ast::*;
use crate::memory::{Value, ValueType};

grammar;

pub ProgramBlock: ProgramBlock = {
    Statement* => ProgramBlock { statements: <> },	
}

Block: Block = {
	<statements:Statement*> <expression:Expression> => Block {
		statements,
		expression: Some(Box::new(expression)),
	},
}

UnitBlock: Block = {
	<statements:Statement*> => Block {
		statements,
		expression: None,
	}
}

Statement: Statement = {
    <lo:@L> <statement:_Statement> <hi:@R> => Statement {
        statement,
        span: Span::new(lo, hi),
    }
}

_Statement: _Statement = {
    LetStatement => <>,
	ExpressionStatement => <>,
}

LetStatement: _Statement = {
	"let" <ident:Ident> (":" ValueType)? "=" <val:Expression> ";" => _Statement::Let(ident, val),
}

ExpressionStatement: _Statement = {
	<Expression> ";" => _Statement::Expression(<>),
	<ExpressionWithUnitBlock> => _Statement::Expression(<>),
}

pub Expression: Expression = {
	ExpressionWithBlock => <>,
	ExpressionWithoutBlock => <>,
}

T0: Expression = {
	"(" <Expression> ")" => <>,

	<lo:@L> <lit:Literal> <hi:@R> => Expression {
		expression: _Expression::Literal(lit),	
		span: Span::new(lo, hi),
	},

	<lo:@L> <ident:Ident> <hi:@R> => Expression { 
		expression: _Expression::Dereferece(
			Box::new(
				Expression { 
					expression: _Expression::Variable(ident),  
					span: Span::new(lo, hi),
				}
			)
		),
		span: Span::new(lo, hi),
	}
}

T1: Expression = {
	<lo:@L> "*" <expr:T1> <hi:@R> => Expression {
		expression: _Expression::Dereferece(Box::new(expr)),
		span: Span::new(lo, hi),
	},

	<lo:@L> "&" <expr:T1> <hi:@R> => Expression {
		expression: _Expression::Reference(Box::new(expr)),
		span: Span::new(lo, hi),
	},

	T0 => <>,
}

T2: Expression = {
	<lo:@L> <target:T2> "=" <value:T1> <hi:@R> => Expression {
		expression: _Expression::Assign(Box::new(target), Box::new(value)),
		span: Span::new(lo, hi),
	},

	T1 => <>
}

ExpressionWithoutBlock: Expression = {
	T2 => <>,
}

ExpressionWithBlock: Expression = {
	<lo:@L> "{" <block:Block> "}" <hi:@R> => Expression {
		expression: _Expression::Block(block),
		span: Span::new(lo, hi),
	},
}

ExpressionWithUnitBlock: Expression = {
	<lo:@L> "{" <block:UnitBlock> "}" <hi:@R> => Expression {
		expression: _Expression::Block(block),
		span: Span::new(lo, hi),
	},
}

pub Literal: Value = {
    r"-?[0-9]+\.[0-9]+" => Value::F32(<>.parse().unwrap()),

    r"-?[0-9]+" => Value::I32(<>.parse().unwrap()),

    r#""[^"]*""# => Value::String(<>[1..<>.len() - 1].to_string()),
}

pub Path: Path = {
    <modules:(<Ident> "::")*> <target:Ident> => {
        Path {
            modules,
            target,
        }
    }
}

Ident: String = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string(),
}

ValueType: ValueType = {
	"i32" => ValueType::I32,
	"f32" => ValueType::F32,
	"str" => ValueType::String,
	"(" ")" => ValueType::Null,
	"&" <ValueType> => ValueType::Ref(Box::new(<>)),
	"dyn" <mut vec:(<Ident> "+")+> <last:Ident> => {
		vec.push(last);

		ValueType::TraitObject(vec)
	}
}
